{"version":3,"sources":["sensor.js","App.js","reportWebVitals.js","index.js"],"names":["Sensor","props","useState","sensorValues","setSensorValues","chartStyle","height","width","uniqueId","chartId1","chartId2","chartId3","getSensorValues","fetch","url","mode","headers","then","response","json","data","useEffect","interval","setInterval","clearInterval","Container","Row","md","Col","xs","lg","name","id","style","nrOfLevels","percent","cornerRadius","colors","needleColor","animate","arcWidth","formatTextValue","value","Table","striped","bordered","hover","variant","App","sensorcfg","setSensorcfg","sensors","map","sensor","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAQO,SAASA,EAAOC,GACnB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAa,CACfC,OAAQ,IACRC,MAAO,KAGX,EAAmBL,oBAAS,kBAAMM,IAAS,gBAApCC,EAAP,oBACA,EAAmBP,oBAAS,kBAAMM,IAAS,gBAApCE,EAAP,oBACA,EAAmBR,oBAAS,kBAAMM,IAAS,gBAApCG,EAAP,oBAEMC,EAAkB,WAChBC,MAAMZ,EAAMa,IAAK,CACbC,KAAM,OACNC,QAAS,CACL,8BAA+B,OAGlCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIhB,EAAgBgB,OAc1C,OAXAC,qBAAU,WACNT,IACA,IAAMU,EAAWC,aAAY,WACzBX,MACD,KAEH,OAAO,WACHY,cAAcF,MAEnB,IAGC,cAACG,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAR,SACI,eAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,UACI,6BAAK7B,EAAM8B,OACX,yCACA,cAAC,IAAD,CAAYC,GAAIvB,EAAUwB,MAAO5B,EAC7B6B,WAAY,EACZC,QAAShC,EAAY,SAAe,IACpCiC,aAAc,EACdC,OAAQ,CAAC,UAAW,UAAW,WAC/BC,YAAY,UACZC,SAAS,IAEb,4CACA,cAAC,IAAD,CAAYP,GAAItB,EAAUuB,MAAO5B,EAC7B6B,WAAY,GACZG,OAAQ,CAAC,UAAW,WACpBG,SAAU,GACVL,QAAShC,EAAY,YAAkB,IACvCsC,gBAAiB,SAAAC,GAAK,OAAIA,EAAQ,SAClCH,SAAS,IAEb,wCACA,cAAC,IAAD,CAAYP,GAAIrB,EAAUsB,MAAO5B,EAC7BkC,SAAS,EACTL,WAAY,GACZC,QAAShC,EAAY,QAAc,IACnCiC,aAAc,EACdC,OAAQ,CAAC,UAAW,UAAW,WAC/BC,YAAY,YAEhB,cAACK,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAtC,SACI,kCACI,+BACI,6CAAoB,6BAAK5C,EAAY,iBAEzC,+BACI,0CAAiB,6BAAKA,EAAY,cAEtC,+BACI,yCAAgB,6BAAKA,EAAY,yB,MCvClD6C,MAnCf,WACE,MAAkC9C,mBAAS,IAA3C,mBAAO+C,EAAP,KAAkBC,EAAlB,KAEA7B,qBAAU,WACRR,MAAY,mBAAoB,CAC9BE,KAAM,OACNC,QAAS,CACP,8BAA+B,OAGhCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI8B,EAAa9B,QAC5B,IAEH,IAAI+B,EAAUF,EAAUG,KAAI,SAACC,GAC3B,OACE,cAAC3B,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,UACE,cAAC5B,EAAD,CAAQ+B,KAAMsB,EAAOtB,KAAMjB,IAAKuC,EAAOvC,aAM/C,OACE,sBAAKwC,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,cAAC7B,EAAA,EAAD,UACG0B,QC1BMI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.72231a77.chunk.js","sourcesContent":["import Table from 'react-bootstrap/Table'\nimport React, { useEffect, useState } from 'react';\nimport GaugeChart from 'react-gauge-chart'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport uniqueId from 'lodash/uniqueId'\n\nexport function Sensor(props) {\n    const [sensorValues, setSensorValues] = useState({})\n\n    const chartStyle = {\n        height: 150,\n        width: 300,\n    }\n\n    const [chartId1] = useState(() => uniqueId('myprefix-'))\n    const [chartId2] = useState(() => uniqueId('myprefix-'))\n    const [chartId3] = useState(() => uniqueId('myprefix-'))\n\n    const getSensorValues = () => {\n            fetch(props.url, {\n                mode: 'cors',\n                headers: {\n                    'Access-Control-Allow-Origin': '*'\n                }\n            })\n                .then(response => response.json())\n                .then(data => setSensorValues(data));\n    }\n\n    useEffect(() => {\n        getSensorValues();\n        const interval = setInterval(() => {\n            getSensorValues();\n        }, 5000);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [])\n\n    return (\n        <Container>\n            <Row md=\"3\">\n                <Col xs lg=\"2\">\n                    <h2>{props.name}</h2>\n                    <p>Humidity</p>\n                    <GaugeChart id={chartId1} style={chartStyle}\n                        nrOfLevels={3}\n                        percent={sensorValues['humidity'] / 100}\n                        cornerRadius={3}\n                        colors={['#5BE12C', '#F5CD19', '#EA4228']}\n                        needleColor=\"#345243\"\n                        animate={false}\n                    />\n                    <p>Temperature</p>\n                    <GaugeChart id={chartId2} style={chartStyle}\n                        nrOfLevels={30}\n                        colors={[\"#FF5F6D\", \"#FFC371\"]}\n                        arcWidth={0.3}\n                        percent={sensorValues['temperature'] / 100}\n                        formatTextValue={value => value + 'Â°C'}\n                        animate={false}\n                    />\n                    <p>Battery</p>\n                    <GaugeChart id={chartId3} style={chartStyle}\n                        animate={false}\n                        nrOfLevels={20}\n                        percent={sensorValues['battery'] / 100}\n                        cornerRadius={3}\n                        colors={['#5BE12C', '#F5CD19', '#EA4228']}\n                        needleColor=\"#345243\"\n                    />\n                    <Table striped bordered hover variant=\"dark\">\n                        <tbody>\n                            <tr>\n                                <td>Linkquality</td><td>{sensorValues['linkquality']}</td>\n                            </tr>\n                            <tr>\n                                <td>Pressure</td><td>{sensorValues['pressure']}</td>\n                            </tr>\n                            <tr>\n                                <td>Voltage</td><td>{sensorValues['voltage']}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import './App.css';\nimport { Sensor } from './sensor';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { useEffect, useState } from 'react';\nimport { url } from './global.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [sensorcfg, setSensorcfg] = useState([]);\n\n  useEffect(() => {\n    fetch(url + '/nodered/sensors', {\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    })\n      .then(response => response.json())\n      .then(data => setSensorcfg(data));\n  }, [])\n\n  let sensors = sensorcfg.map((sensor) => {\n    return (\n      <Row>\n        <Col>\n          <Sensor name={sensor.name} url={sensor.url} />\n        </Col>\n      </Row>\n    )\n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <Container>\n        {sensors}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}